# Setup server api security groups for prod and non-prod
{% for environment in aws_terraform_environment %}
resource "aws_security_group" "{{ item }}_sec_group_{{ environment }}" {
  name        = "{{ country_code }}-{{ item }}-{{ environment }}-sg"
  description = "{{ country_code }} {{ item }} restricted security group"

  ingress {
    from_port   = "{{ aws_terraform_mysql_port }}"
    to_port     = "{{ aws_terraform_mysql_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_cidr_block_31_all }}"]
  }

  ingress {
    from_port   = "{{ aws_terraform_elb_ssl_port }}"
    to_port     = "{{ aws_terraform_elb_ssl_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_default_cidr }}"]
  }

  ingress {
    from_port   = "{{ aws_terraform_ssh_port }}"
    to_port     = "{{ aws_terraform_ssh_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_cidr_block_31_all }}"]
  }

  ingress {
    from_port   = "{{ aws_terraform_api_dev_elb_port }}"
    to_port     = "{{ aws_terraform_api_qa2_elb_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_cidr_block_31_all }}"]
  }

  ingress {
    from_port   = "{{ aws_terraform_from_port }}"
    to_port     = "{{ aws_terraform_to_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_default_cidr }}"]
  }

  ingress {
    from_port   = "{{ aws_terraform_elb_port }}"
    to_port     = "{{ aws_terraform_elb_port }}"
    protocol    = "{{ aws_terraform_tcp_protocol }}"
    cidr_blocks = ["{{ aws_terraform_cidr_block_31_all }}"]
  }

  egress {
    from_port   = "{{ aws_terraform_default_from_port }}"
    to_port     = "{{ aws_terraform_default_to_port }}"
    protocol    = "{{ aws_terraform_default_protocol }}"
    cidr_blocks = ["{{ aws_terraform_default_cidr }}"]
  }
}

# Setup server api elb for prod and non-prod
resource "aws_elb" "{{ item }}_elb_{{ environment }}" {
  name = "{{ country_code }}-{{ environment }}-{{ item }}"

  listener {
    {% if  environment =="dev" %}
    instance_port = "{{ aws_terraform_api_dev_elb_port }}"

    {% elif  environment =="demo" %}
    instance_port = "{{ aws_terraform_api_demo_elb_port }}"

    {% elif  environment =="qa" %}
    instance_port = "{{ aws_terraform_api_qa_elb_port }}"

    {% elif  environment =="qa2" %}
    instance_port = "{{ aws_terraform_api_qa2_elb_port }}"

    {% elif  environment =="staging" %}
    instance_port = "{{ aws_terraform_api_staging_elb_port }}"

    {% else %}
    instance_port = "{{ aws_terraform_elb_port }}"

    {% endif %}
    instance_protocol  = "{{ aws_terraform_elb_protocol }}"
    lb_port            = "{{ aws_terraform_elb_ssl_port }}"
    lb_protocol        = "{{ aws_terraform_elb_ssl_protocol }}"
    ssl_certificate_id = "{{ aws_terraform_certificate_id }}"
  }

  health_check {
    healthy_threshold   = 10
    unhealthy_threshold = 2
    timeout             = 5
    interval            = 30

    {% if  environment =="dev" %}
    target = "TCP:{{ aws_terraform_api_dev_elb_port }}"

    {% elif  environment =="demo" %}
    target = "TCP:{{ aws_terraform_api_demo_elb_port }}"

    {% elif  environment =="qa" %}
    target = "TCP:{{ aws_terraform_api_qa_elb_port }}"

    {% elif  environment =="qa2" %}
    target = "TCP:{{ aws_terraform_api_qa2_elb_port }}"

    {% elif  environment =="staging" %}
    target = "TCP:{{ aws_terraform_api_staging_elb_port }}"

    {% else %}
    target = "TCP:{{ aws_terraform_elb_port }}"

    {% endif %}
  }

  instances       = ["${aws_instance.{{ item }}_ec2_{{ environment }}.*.id}"]
  security_groups = ["${aws_security_group.{{ item }}_sec_group_{{ environment }}.id}"]
  internal        = "False"
  subnets         = ["subnet-03aa7c68", "subnet-02aa7c69", "subnet-0caa7c67"]
}

resource "aws_lb_cookie_stickiness_policy" "{{ item }}_ec2_{{ environment }}" {
  name                     = "elb-policy-{{ item }}-{{ environment}}"
  load_balancer            = "${aws_elb.{{ item }}_elb_{{ environment }}.id}"
  lb_port                  = 443
  cookie_expiration_period = 1800
}

# Setup aws instance elb for prod and non-prod
resource "aws_instance" "{{ item }}_ec2_{{ environment }}" {
  ami      = "{{ aws_terraform_region_ami }}"
  key_name = "{{ aws_terraform_key_name }}"

  {% if environment == "prod" %}
  instance_type = "{{ aws_terraform_instance_type_api }}"
  count         = "{{ aws_terraform_default_instance_count }}"

  {% elif environment == "staging" %}
  instance_type = "{{ aws_terraform_instance_type_medium }}"
  count         = "{{ aws_terraform_default_instance_count }}"

  {% else %}
  instance_type = "{{ aws_terraform_instance_type_small }}"
  count         = 1

  {% endif %}
  vpc_security_group_ids = ["${aws_security_group.{{ item }}_sec_group_{{ environment }}.id}"]

  tags {
    Name = "{{ country_code }}-{{ item }}-{{ environment }}-${count.index + 1}"
  }

  root_block_device {
    volume_type           = "{{ aws_terraform_volume_type }}"
    volume_size           = "{{ aws_terraform_block_device_size }}"
    delete_on_termination = true
  }

  subnet_id = "{{ aws_terraform_subnet_private_id }}"

  provisioner "remote-exec" {
    inline = [
      "sudo hostnamectl set-hostname {{ country_code }}-{{ item}}-{{ environment }}-${count.index + 1 }",
    ]
  }

  connection {
    user = "{{ aws_terraform_default_user }}"
    host = "${self.private_ip}"
  }
}

# Setup aws instance route53 for prod and non-prod
resource "aws_route53_record" "{{ item }}_route53_{{ environment }}" {
  zone_id = "{{ zone_id }}"

  {% if environment == "prod" %}
  name = "{{ country_code }}-api.{{ aws_terraform_default_dns }}"

  {% else %}
  name = "{{ country_code }}-{{ environment }}-{{ item }}.{{ aws_terraform_default_dns }}"

  {% endif %}
  type    = "CNAME"
  records = ["${aws_elb.{{ item }}_elb_{{ environment }}.dns_name}"]
  ttl     = "300"
}
{% endfor %}
